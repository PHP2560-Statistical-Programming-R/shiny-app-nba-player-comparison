setwd("untitled folder/")
library(shiny)
ui <- fluidPage(
headerPanel("P-value Calculator"),
br(),
hr(),
sidebarLayout(
sidebarPanel(
numericInput(inputId = "z", label = "Z-value", value = 0, step = 0.01),
selectInput("hypothesis", "One-tailed or two-tailed hypothesis?",
choices = c("One-tailed hypothesis",
"Two-tailed hypothesis")),
actionButton(inputId = "calc", label = "Calculate")),
mainPanel(
verbatimTextOutput("p")
)
)
)
server <- function(input, output){
output$p = renderText({
Type <- input$hypothesis
if (Type == "One-tailed hypothesis"){
input$calc
isolate(paste("P-value is ", pnorm(input$z, lower.tail = FALSE), sep = ""))
} else if (Type == "Two-tailed hypothesis"){
input$calc
isolate(paste("P-value is ", 2*pnorm(input$z, lower.tail = FALSE), sep = ""))
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("P-value calculator for normal standard distribution"),
br(),
br(),
sidebarLayout(
sidebarPanel(
numericInput("z_value", "Z value",
value = 1 ),
br(),
hr(),
br(),
actionButton("show_results", "An action button") # The app will calculate the P-value after you
# click the action button
),
mainPanel(
h2(textOutput("Pvalue"))
)
)
)
server <- function(input, output) {
output$Pvalue <- renderText({
input$show_results
isolate({
paste("P value:", pnorm(-input$z_value),sep=" ") # Calculate P value
})
})
}
shinyApp(ui = ui, server = server)
?pnorm
# check for requiered packages and get them if needed
names <- c(
"shiny",
"stats"
)
for(name in names) {
if (!(name %in% installed.packages()))
install.packages(name, repos="http://cran.us.r-project.org")
library(name, character.only=TRUE)
}
ui <- fluidPage(
titlePanel("p-value calculator"),
br(),
sidebarLayout(
sidebarPanel(
numericInput(inputId = "z", label = "z-score", value = 0),
br(),
actionButton("action", "Calculate")
),
mainPanel(
h1(textOutput("p"))
)
)
)
server <- function(input, output) {
output$p <- renderText({input$actionisolate({
paste("p-value: ", pnorm(-input$z))
})
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
ui <- fluidPage(
titlePanel("P-value calculator for normal standard distribution"),
br(),
br(),
sidebarLayout(
sidebarPanel(
numericInput("z_value", "Z value",
value = 1 ),
br(),
hr(),
br(),
actionButton("show_results", "An action button") # The app will calculate the P-value after you
# click the action button
),
mainPanel(
h2(textOutput("Pvalue"))
)
)
)
server <- function(input, output) {
output$Pvalue <- renderText({
input$show_results
isolate({
paste("P value:", pnorm(-input$z_value),sep=" ") # Calculate P value
})
})
}
shinyApp(ui = ui, server = server)
runApp()
